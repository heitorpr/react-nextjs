import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op
from typing import Sequence


"""init db

Revision ID: 5f30f65d13b7
Revises:
Create Date: 2025-10-01 15:44:06.692144

"""

# revision identifiers, used by Alembic.
revision: str = "5f30f65d13b7"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permission",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_permission_name"), "permission", ["name"], unique=True)
    op.create_index(op.f("ix_permission_uuid"), "permission", ["uuid"], unique=True)
    op.create_table(
        "user",
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("google_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_google_id"), "user", ["google_id"], unique=True)
    op.create_index(op.f("ix_user_uuid"), "user", ["uuid"], unique=True)
    op.create_table(
        "userpermission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permission.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_userpermission_uuid"), "userpermission", ["uuid"], unique=True)

    # Seed initial permissions
    permissions_table = sa.table(
        "permission",
        sa.column("id", sa.Integer),
        sa.column("uuid", sa.Uuid),
        sa.column("name", sqlmodel.sql.sqltypes.AutoString),
        sa.column("description", sqlmodel.sql.sqltypes.AutoString),
    )

    op.bulk_insert(
        permissions_table,
        [
            {
                "uuid": "12345678-9abc-def0-1234-56789abcdef0",
                "name": "manage_user_access",
                "description": "Permission to manage user access and permissions",
            }
        ],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_userpermission_uuid"), table_name="userpermission")
    op.drop_table("userpermission")
    op.drop_index(op.f("ix_user_uuid"), table_name="user")
    op.drop_index(op.f("ix_user_google_id"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_permission_uuid"), table_name="permission")
    op.drop_index(op.f("ix_permission_name"), table_name="permission")
    op.drop_table("permission")
    # ### end Alembic commands ###
